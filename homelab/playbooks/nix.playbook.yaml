---
- name: Install and configure Nix package manager
  hosts: netbird
  become: true
  gather_facts: true

  vars:
    # Override default variables if needed
    nix_installation_method: "determinate" # or "upstream" or "native"
    nix_flakes_enabled: true
    nix_user_profile_setup: true
    nix_systemd_service: true
    nix_home_manager_enabled: true
    nix_home_manager_flake_enabled: true

    # Custom Nix configuration
    nix_extra_config:
      - "auto-optimise-store = true"
      - "experimental-features = nix-command flakes"
      - "max-jobs = auto"
      - "trusted-users = root @wheel {{ ansible_user }}"
      - "keep-outputs = true"
      - "keep-derivations = true"
      - "accept-flake-config = true"
      - "warn-dirty = false"

  pre_tasks:
    - name: Wait for any running apt processes to complete
      ansible.builtin.shell: |
        while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for other apt processes to complete..."
          sleep 5
        done
      changed_when: false

    - name: Ensure apt lock files are not stale
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dpkg/lock-frontend
        - /var/lib/dpkg/lock
        - /var/cache/apt/archives/lock
      ignore_errors: true
      when: ansible_os_family == "Debian"

    - name: Display system information
      ansible.builtin.debug:
        msg: |
          Installing Nix on: {{ inventory_hostname }}
          OS Family: {{ ansible_os_family }}
          Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          User: {{ ansible_user }}

    - name: Check if running on supported OS
      ansible.builtin.fail:
        msg: "This playbook only supports Debian/Ubuntu systems"
      when: ansible_os_family != "Debian"

  roles:
    - role: nix
      tags:
        - nix
        - package-manager
        - development

  post_tasks:
    - name: Display final status
      ansible.builtin.debug:
        msg: |
          ‚úÖ Nix installation completed successfully!

          üè† Home Manager Status:
          {% if nix_home_manager_config_exists | default(false) %}
          ‚úÖ Using your existing home-manager configuration from dotfiles
          {% else %}
          ‚úÖ Created initial home-manager configuration
          {% endif %}

          Next steps:
          1. Reload your shell: source ~/.bashrc
          2. Test Nix: nix --version
          3. Test flakes: nix run nixpkgs#hello

          üìÅ Dotfiles Management:
          {% if nix_home_manager_config_exists | default(false) %}
          ‚úÖ Your dotfiles have been applied successfully
          - Configuration: ~/.config/home-manager/home.nix (from your dotfiles)
          - Apply changes: cd ~/.config/home-manager && nix run home-manager/release-24.05 -- switch --flake .#{{ nix_home_manager_user }}@{{ nix_machine_type }}
          {% else %}
          ‚ö†Ô∏è  No existing dotfiles found
          - Default configuration created at: ~/.config/home-manager/home.nix
          - Edit: vim ~/.config/home-manager/home.nix
          - Apply: cd ~/.config/home-manager && nix run home-manager/release-24.05 -- switch --flake .#{{ nix_home_manager_user }}@{{ nix_machine_type }}
          {% endif %}

          üîç Nix Flakes (modern package management):
          - nix search nixpkgs <package>  # Search for packages
          - nix run nixpkgs#<package>     # Run package temporarily
          - nix shell nixpkgs#<package>   # Enter shell with package
          - nix develop                   # Enter development environment

          üì¶ Package Management Best Practices:
          - Use home-manager for user packages (recommended)
          - Use flakes for project-specific environments
          - Avoid nix-env for permanent installations
