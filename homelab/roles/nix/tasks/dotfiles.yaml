---
# Dotfiles management tasks - download and setup user's dotfiles before home-manager

- name: Check for GitHub token
  ansible.builtin.set_fact:
    github_token: "{{ lookup('env', 'HOMELAB_GITHUB_TOKEN') | default(lookup('env', 'GITHUB_TOKEN')) }}"
  no_log: true

- name: Clone and setup dotfiles repository
  become: false
  ansible.builtin.shell: |
    # Authenticate with GitHub using existing gh installation
    echo 'Authenticating with GitHub...'
    echo '{{ github_token }}' | gh auth login --with-token

    # Check authentication status
    gh auth status

    # Get the authenticated user's username
    GITHUB_USER=$(gh api user --jq '.login')
    echo "GitHub user: $GITHUB_USER"

    # Clone dotfiles repository if it doesn't exist
    if [ ! -d {{ user_home_dir }}/dotfiles ]; then
      echo "Cloning dotfiles repository for user: $GITHUB_USER"
      cd {{ user_home_dir }}
      gh repo clone $GITHUB_USER/dotfiles
    else
      echo 'Dotfiles directory already exists, pulling latest changes...'
      cd {{ user_home_dir }}/dotfiles
      if [ -n "$(git status --porcelain)" ]; then
        echo 'Stashing local changes before sync...'
        git stash --all
        gh repo sync --force
        echo 'Local changes have been stashed. Use "git stash list" and "git stash pop" to recover.'
      else
        gh repo sync --force
      fi
    fi
  register: dotfiles_setup
  failed_when: false
  changed_when: dotfiles_setup.rc == 0
  when: github_token | length > 0
  tags:
    - dotfiles
    - github

- name: Setup dotfiles with stow
  become: false
  ansible.builtin.shell: |
    cd ~/dotfiles && git checkout main && stow .
  register: stow_setup
  failed_when: false
  when:
    - github_token | length > 0
    - dotfiles_setup is defined
    - dotfiles_setup.rc == 0
  tags:
    - dotfiles
    - stow

- name: Display dotfiles setup status
  ansible.builtin.debug:
    msg: |
      📁 Dotfiles Management:
      {% if github_token | length > 0 %}
      ✅ GitHub Token: Available
      {% if dotfiles_setup is defined and (dotfiles_setup.rc is defined and dotfiles_setup.rc == 0) %}✅ Dotfiles: Tools installed and repository cloned successfully{% elif dotfiles_setup is defined %}❌ Dotfiles: Setup failed - {{ dotfiles_setup.stderr | default('Unknown error') }}{% else %}⚠️ Dotfiles: Setup was skipped{% endif %}
      {% if stow_setup is defined and (stow_setup.rc is defined and stow_setup.rc == 0) %}✅ Stow: Applied dotfiles successfully{% elif stow_setup is defined %}❌ Stow: Setup failed - {{ stow_setup.stderr | default('Unknown error') }}{% else %}⚠️ Stow: Setup was skipped{% endif %}
      {% else %}
      ⚠️  GitHub Token: Not provided
      💡 Set HOMELAB_GITHUB_TOKEN or GITHUB_TOKEN environment variable to enable dotfiles management
      💡 Example: export HOMELAB_GITHUB_TOKEN="your_token_here"
      💡 Manual setup: Clone your dotfiles to ~/dotfiles and run this playbook again
      {% endif %}

- name: Check if home-manager config exists in dotfiles
  ansible.builtin.stat:
    path: "{{ user_home_dir }}/.config/home-manager/home.nix"
  register: dotfiles_home_manager_config

- name: Update role fact about home-manager config
  ansible.builtin.set_fact:
    nix_home_manager_config_exists: "{{ dotfiles_home_manager_config.stat.exists }}"
